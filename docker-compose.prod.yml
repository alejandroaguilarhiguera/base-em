version: '3.3'
services:
  db:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    volumes: 
      - db:/var/lib/postgresql/data
volumes:
  db:
    driver: local


  ########################
  # Nginx Server
  ########################
  nginx:
    container_name: rh-nginx
    build:
      context: './'
      dockerfile: docker/nginx/Dockerfile.staging
    image: rh-nginx
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - '80:80' # Connect localhost 80 port to container 80 port
      - '443:443'
    depends_on:
      - 'api'
      - 'webapp'
    volumes:
      - ./.data/ssl:/etc/ssl/em.dev
    links: # Link services to access http://backoffice and  http://api inside the container
      - api:api
      - webapp:webapp
    extra_hosts:
      - '${WEBAPP_DOMAIN}:127.0.0.1'
    networks:
      - 'em'

  ########################
  # WebApp server
  ########################
  webapp:
    container_name: em-webapp
    build:
      context: './'
      dockerfile: docker/webapp/Dockerfile
      args:
        - TZ=${TZ}
    image: em-webapp
    env_file: .env
    environment:
      - PORT=${WEBAPP_PORT}
    volumes:
      - ./projects/website/.env:/usr/app/website/.env
    ports:
      - '${WEBAPP_PORT}:8081'
    networks:
      - 'em'

  ########################
  # API Server
  ########################
  api:
    container_name: em-api
    build:
      context: './'
      dockerfile: docker/api/Dockerfile
      args:
        - TZ=${TZ}
    image: em-api
    env_file: .env
    links:
      - db:db
      - webapp:webapp
    depends_on:
      - 'db'
    volumes:
      - ./projects/api/.env:/usr/app/api/.env
    networks:
      - 'em'