version: '3.3'

networks:
  em:
    driver: bridge
volumes:
  db:
    driver: local
  webapp:
    driver: local
  backoffice:
    driver: local
  api:
    driver: local

services:
  db:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    ports:
      - '${DATABASE_PORT}:5432'
    volumes: 
      - db:/var/lib/postgresql/data:delegated
    networks:
      - em

  mongo:
    image: mongo
    container_name: em-mongo
    restart: unless-stopped
    env_file: .env
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    ports:
      - '${MONGO_PORT}:27017'
    volumes:
      - ./docker/mongo/docker-entrypoint-initdb.d/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:delegated
      - ./.data/mongo:/data/db2:delegated
      - ./docker/mongo/mongodb.dev.conf:/etc/mongodb.conf:delegated
    networks:
      - 'em'

  ########################
  # WebApp server
  ########################
  webapp:
    container_name: em-webapp
    build:
      context: './'
      dockerfile: docker/webapp/Dockerfile.dev
      args:
        - TZ=${TZ}
    image: em-webapp
    env_file: .env
    volumes:
      - ./projects/webapp:/usr/app/webapp:delegated
    ports:
      - '${WEBAPP_PORT}:3000'
    links:
      - db:db
    depends_on:
      - 'db'
      - 'api'
    networks:
      - 'em'

  ########################
  # Backoffice server
  ########################
  backoffice:
    container_name: em-backoffice
    build:
      context: './'
      dockerfile: docker/backoffice/Dockerfile.dev
      args:
        - TZ=${TZ}
    image: em-backoffice
    volumes:
      - ./projects/backoffice:/usr/app/backoffice:delegated
    ports:
      - '${BACKOFFICE_PORT}:4200'
    links:
      - db:db
    depends_on:
      - 'db'
      - 'api'
    networks:
      - 'em'

  ########################
  # API Server
  ########################
  api:
    container_name: em-api
    build:
      context: './'
      dockerfile: docker/api/Dockerfile.dev
      args:
        - TZ=${TZ}
    image: em-api
    env_file: .env
    links:
      - db:db
    depends_on:
      - 'db'
    ports:
      - '${API_PORT}:1337'
    volumes:
      - ./projects/api/.env:/usr/app/api/.env
    networks:
      - 'em'




  ########################
  # Nginx Server
  ########################
  #nginx:
  #  container_name: rh-nginx
  #  build:
  #    context: './'
  #    dockerfile: docker/nginx/Dockerfile.staging
  #  image: rh-nginx
  #  command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  #  ports:
  #    - '80:80' # Connect localhost 80 port to container 80 port
  #    - '443:443'
  #  depends_on:
  #    - 'api'
  #    - 'webapp'
  #  volumes:
  #    - ./.data/ssl:/etc/ssl/em.dev
  #  links: # Link services to access http://backoffice and  http://api inside the container
  #    - api:api
  #    - webapp:webapp
  #  extra_hosts:
  #    - '${WEBAPP_DOMAIN}:127.0.0.1'
  #  networks:
  #    - 'em'


